#define _XTAL_FREQ 20000000
// LCD Module Connections
#define RS RB2
#define EN RB3
#define D4 RB4
#define D5 RB5
#define D6 RB6
#define D7 RB7
// END LCD Module Connections
#define X_1    RD0
#define X_2    RD1
#define X_3    RD2
#define X_4    RD3
#define Y_1    RD4
#define Y_2    RD5
#define Y_3    RD6
#define Y_4    RD7
#define pump   RC3

#include <xc.h>
#include "lcd.h";
#include "uart.h";
#include <stdio.h>
#include <string.h>
#include <pic16f877a.h>
// BEGIN CONFIG
#pragma config FOSC = HS // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF // Flash Program Memory Code Protection bit (Code protection off)
//END CONFIG

void delay(int n) {
    for (int i = 0; i < 1000; i++)
        for (int j = 0; j < n; j++);
}

char keypad();
int get_num(char ch);
char keypad_read(void);
int status = 0;

void main() {
    char rfid[13], rfdata[][12] = {
        {"5900D49CEDFC"},
        {"5900D4B35967"},
        {"aabbcc112233"}
    },
    pindata[][6] = {
        {"1234\0"},
        {"2345\0"},
        {"3456\0"}
    },
    blacklist[][13] = {
        {"5900D4A7A08A"},
        {"abc123abc123"},
        {"abc123123abc"}
    };
    char pin[5], key_char,amount[4];
    int a, b, key_int, i, j, count, id = 0;
    pump = 0;
    TRISB = 0x00;
    TRISD = 0XF0;
    TRISC = 0XC0;

    Lcd_Init(); // Initialize LCD
    UART_Init(9600); // Initialize UART, 9600 baud rate 
    rfid[12] = '\0';
success:
    status = 0;
    id = 0;
    key_int = 0;
    Lcd_Clear(); // Clear display
    Lcd_Set_Cursor(1, 1);
    Lcd_Write_String("<<<Swipe card>>>");
    while (1) {
        if (UART_Data_Ready()) {
            for (i = 0; i < 12;) {
                if (UART_Data_Ready()) {
                    rfid[i] = UART_Read();
                    i++;
                }
            }
            Lcd_Set_Cursor(2, 1);
            Lcd_Write_String(rfid);
            delay(100);
            Lcd_Clear();
            Lcd_Set_Cursor(1, 1);
            Lcd_Write_String("Card Swiped");
            delay(100);
            Lcd_Clear();
            Lcd_Set_Cursor(1, 1);
            Lcd_Write_String("Checking");
            delay(100);
            for (i = 0; i < 3; i++) {
                count = 0;
                a = 0;
                for (j = 0; j < 4; j++) {
                    if (memcmp(rfid, rfdata[j], 12) == 0) {
                        count = 12;
                        id = j;
                    }
                    if (count == 12) {
                        a = 1;
                        count = 0;
                        Lcd_Clear();
                        Lcd_Set_Cursor(1, 1);
                        Lcd_Write_String("Match Found");
                        delay(100);

                        for (int k = 0; k < 3; k++) {
                            Lcd_Clear();
                            Lcd_Set_Cursor(1, 1);
                            Lcd_Write_String("Enter Pin");
                            status = 1; //Setting Password Mode
                            Lcd_Set_Cursor(2, 1);
                            pin[4] = "\0";
                            for (j = 0; j < 4; j++) {
                                pin[j] = 0;
                                pin[j] = keypad_read();
                                if (pin[j] == 'C') {
                                    Lcd_Clear();
                                    Lcd_Set_Cursor(1, 1);
                                    Lcd_Write_String("Cancelled");
                                    delay(100);
                                    goto success;
                                }
                            }
                            count = 0;
                            for (j = 0; j < 4; j++) {
                                if (memcmp(pin, pindata[id], 4) == 0) {
                                    count = 4;
                                    id = 0;
                                } else {
                                    Lcd_Clear();
                                    Lcd_Set_Cursor(1, 1);
                                    Lcd_Write_String("PASSWORD INCORRECT");
                                    delay(100);
                                    if (k == 2) {
                                        Lcd_Set_Cursor(2, 1);
                                        Lcd_Write_String("NO MORE CHANCES");
                                        delay(100);
                                        Lcd_Clear();
                                        Lcd_Set_Cursor(1, 1);
                                        Lcd_Write_String("Cancelled");
                                        delay(100);
                                        goto success;

                                    }
                                    break;
                                }
                                if (count == 4) {
                                    count = 0;
                                    Lcd_Clear();
                                    Lcd_Set_Cursor(1, 1);
                                    Lcd_Write_String("Enter Amount");
                                    status = 0;
                                    Lcd_Set_Cursor(2, 1);
                                    amount[4]='\0';
                                    for (j = 0; j < 4; j++) {
                                        key_char = keypad_read();
                                        if (key_char == 'A')
                                            break;
                                        if (key_char == 'C') {
                                            Lcd_Clear();
                                            Lcd_Set_Cursor(1, 1);
                                            Lcd_Write_String("Cancelled");
                                            delay(100);
                                            goto success;
                                        }
                                        amount[j] = key_char;
                                    }
                                    Lcd_Clear();
                                    Lcd_Set_Cursor(1, 1);
                                    Lcd_Write_String("Pumping started");
                                    delay(100);
                                    pump = 1;
                                    delay(amount);
                                    pump = 0;
                                    Lcd_Clear();
                                    Lcd_Set_Cursor(1, 1);
                                    Lcd_Write_String("SUCCESS");
                                    UART_Write_Text("ATE0\r\n");
                                    delay(1000);
                                    UART_Write_Text("AT\r\n");
                                    delay(1000);
                                    UART_Write_Text("AT+CMGF=1\r\n");
                                    delay(1000);
                                    UART_Write_Text("AT+CNMI=1,2,0,0,0\r\n");
                                    delay(1000);
                                    UART_Write_Text("AT+CMGS=\"+918075506798\"\r\n");
                                    delay(1000);
                                    UART_Write_Text(rfid);
                                    UART_Write_Text(" as paid Rs:");
                                    UART_Write_Text(amount);
                                    UART_Write_Text("/- at Petrol Pump.");
                                    delay(500);
                                    UART_Write(26);
                                    delay(100);
                                    goto success;
                                }

                            }
                        }
                    }
                }
                for (j = 0; j < 12; j++) //checking blacklist
                {
                    if (memcmp(rfid, blacklist, 12) == 0) {
                        id = j;
                        count = 12;
                    } else {
                        break;
                    }
                    if (count == 12) {
                        a = 1;
                        Lcd_Clear();
                        Lcd_Set_Cursor(1, 1);
                        Lcd_Write_String("BLACKLISTED");
                        delay(100);
                        UART_Write_Text("ATE0\r\n");
                        delay(1000);
                        UART_Write_Text("AT\r\n");
                        delay(1000);
                        UART_Write_Text("AT+CMGF=1\r\n");
                        delay(1000);
                        UART_Write_Text("AT+CNMI=1,2,0,0,0\r\n");
                        delay(1000);
                        UART_Write_Text("AT+CMGS=\"+919400356078\"\r\n");
                        delay(1000);
                        UART_Write_Text("Blacklisted card found Card Id: ");
                        UART_Write_Text(blacklist[id]);
                        delay(500);
                        UART_Write(26);
                        delay(100);
                        id = 0;
                        goto success;
                    }
                }
                if (a == 0 && i == 2) {
                    Lcd_Clear();
                    Lcd_Set_Cursor(1, 1);
                    Lcd_Write_String("not in list");
                    delay(100);
                    goto success;
                }
            }

        }
    }
}

char keypad() {
    X_1 = 0;
    X_2 = 1;
    X_3 = 1;
    X_4 = 1;
    if (Y_1 == 0) {
        delay(100);
        while (Y_1 == 0);
        if (status == 0)
            Lcd_Write_String("7");
        else
            Lcd_Write_String("*");
        return '7';
    }
    if (Y_2 == 0) {
        delay(100);
        while (Y_2 == 0);
        if (status == 0)
            Lcd_Write_String("8");
        else
            Lcd_Write_String("*");
        return '8';
    }
    if (Y_3 == 0) {
        delay(100);
        while (Y_3 == 0);
        if (status == 0)
            Lcd_Write_String("9");
        else
            Lcd_Write_String("*");
        return '9';
    }
    if (Y_4 == 0) {
        delay(100);
        while (Y_4 == 0);
        if (status == 0)
            Lcd_Write_String("A");
        else
            Lcd_Write_String("*");
        return 'A';
    }

    X_1 = 1;
    X_2 = 0;
    X_3 = 1;
    X_4 = 1;
    if (Y_1 == 0) {
        delay(100);
        while (Y_1 == 0);
        if (status == 0)
            Lcd_Write_String("4");
        else
            Lcd_Write_String("*");
        return '4';
    }
    if (Y_2 == 0) {
        delay(100);
        while (Y_2 == 0);
        if (status == 0)
            Lcd_Write_String("5");
        else
            Lcd_Write_String("*");
        return '5';
    }
    if (Y_3 == 0) {
        delay(100);
        while (Y_3 == 0);
        if (status == 0)
            Lcd_Write_String("6");
        else
            Lcd_Write_String("*");
        return '6';
    }
    if (Y_4 == 0) {
        delay(100);
        while (Y_4 == 0);
        if (status == 0)
            Lcd_Write_String("B");
        else
            Lcd_Write_String("*");
        return 'B';
    }

    X_1 = 1;
    X_2 = 1;
    X_3 = 0;
    X_4 = 1;
    if (Y_1 == 0) {
        delay(100);
        while (Y_1 == 0);
        if (status == 0)
            Lcd_Write_String("1");
        else
            Lcd_Write_String("*");
        return '1';
    }
    if (Y_2 == 0) {
        delay(100);
        while (Y_2 == 0);
        if (status == 0)
            Lcd_Write_String("2");
        else
            Lcd_Write_String("*");
        return '2';
    }
    if (Y_3 == 0) {
        delay(100);
        while (Y_3 == 0);
        if (status == 0)
            Lcd_Write_String("3");
        else
            Lcd_Write_String("*");
        return '3';
    }
    if (Y_4 == 0) {
        delay(100);
        while (Y_4 == 0);
        if (status == 0)
            Lcd_Write_String("C");
        else
            Lcd_Write_String("*");
        return 'C';
    }

    X_1 = 1;
    X_2 = 1;
    X_3 = 1;
    X_4 = 0;
    if (Y_1 == 0) {
        delay(100);
        while (Y_1 == 0);
        if (status == 0)
            Lcd_Write_String("*");
        else
            Lcd_Write_String("*");
        return '*';
    }
    if (Y_2 == 0) {
        delay(100);
        while (Y_2 == 0);
        if (status == 0)
            Lcd_Write_String("0");
        else
            Lcd_Write_String("*");
        return '0';
    }
    if (Y_3 == 0) {
        delay(100);
        while (Y_3 == 0);
        if (status == 0)
            Lcd_Write_String("#");
        else
            Lcd_Write_String("*");
        return '#';
    }
    if (Y_4 == 0) {
        delay(100);
        while (Y_4 == 0);
        if (status == 0)
            Lcd_Write_String("D");
        else
            Lcd_Write_String("*");
        return 'D';
    }

    return 'n';
}

int get_num(char ch) //converting character into integer
{
    switch (ch) {
        case '0': return 0;
            break;
        case '1': return 1;
            break;
        case '2': return 2;
            break;
        case '3': return 3;
            break;
        case '4': return 4;
            break;
        case '5': return 5;
            break;
        case '6': return 6;
            break;
        case '7': return 7;
            break;
        case '8': return 8;
            break;
        case '9': return 9;
            break;
    }
}

char keypad_read(void) // Get key from user
{
    char key = 'n'; // Assume no key pressed
    while (key == 'n') // Wait untill a key is pressed
    key = keypad(); // Scan the keys again and again
    return key; //when key pressed then return its value
}
